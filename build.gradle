buildscript {	
	repositories {
		maven{
			url "http://maven.aliyun.com/nexus/content/groups/public"
		}
		mavenCentral()
		mavenLocal()
		jcenter()
	}
		
}
//load properties from config file
def loadGroovyConfig(p){
		if(p == null){
			return new java.util.HashMap();
		}
		def configFile = file("environment.groovy")
		def profileObject = new ConfigSlurper(p).parse(configFile.toURL()).toProperties()
		if(profileObject.isEmpty()){
			throw new InvalidUserDataException("profile not found name is "+p);
		}
		return profileObject
		
}
def env = loadGroovyConfig("base")
env.putAll(loadGroovyConfig(System.getProperty("profile")))
env.putAll(System.properties)

configure(subprojects) { project ->
	apply plugin: "java"
	apply plugin: "maven"
	
	sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
	repositories {
		maven{
			url "http://maven.aliyun.com/nexus/content/groups/public"
		}
		mavenCentral()
		mavenLocal()
	}
	// put env to project ext
	env.each{ k, v -> ext.set(k,v)}
	
	ext{
		slf4jVersion = "1.7.21"
		junitVersion = "4.12"
		logbackVersion = "1.1.7"
		akkaVersion = "2.4.12"
		fstVersion = "2.48"
		protostuffVersion = "1.5.2"
		springVersion = "4.2.6.RELEASE"
	}
	compileJava.options.encoding = ext["encoding"];
	compileTestJava.options.encoding = ext["encoding"];
	
	task sourcesJar(type: Jar, dependsOn: classes) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	artifacts {
	    archives sourcesJar
	}
	
	dependencies{
		testCompile ("junit:junit:${junitVersion}")
	}
	processTestResources {
		from(sourceSets.test.resources.srcDirs) {
			include '**/*.properties'
			filter(org.apache.tools.ant.filters.ReplaceTokens,tokens: env)
		}
	}
	test{
		testLogging{
			showStandardStreams  = true
		}
	}
}


project(":appsugar-cluster-service-api"){
	
}

project(":appsugar-cluster-service-akka"){
	dependencies{
		compile project(":appsugar-cluster-service-api")
		compile("ch.qos.logback:logback-classic:${logbackVersion}")
		compile("org.slf4j:slf4j-api:${slf4jVersion}")
		compile("com.typesafe.akka:akka-cluster_2.11:${akkaVersion}")
		compile("com.typesafe.akka:akka-cluster-tools_2.11:${akkaVersion}")
		compile("com.typesafe.akka:akka-cluster-metrics_2.11:${akkaVersion}")
		compile("de.ruedigermoeller:fst:${fstVersion}")
		compile("io.protostuff:protostuff-core:${protostuffVersion}")
		compile("io.protostuff:protostuff-runtime:${protostuffVersion}")
		compile("io.protostuff:protostuff-runtime-registry:${protostuffVersion}")
	}
}

project(":appsugar-cluster-service-binding"){
	dependencies{
		compile project(":appsugar-cluster-service-akka")
	}
}

project(":appsugar-cluster-service-binding-spring"){
	dependencies{
		compile project(":appsugar-cluster-service-binding")
		compileOnly("org.springframework:spring-context:${springVersion}")
		testCompile("org.springframework:spring-context:${springVersion}")
		testCompile ("org.springframework:spring-test:${springVersion}")
	}
}
